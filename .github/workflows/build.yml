name: Build, Release and Publish Firmware

on:
  workflow_call:
    inputs:
      device-name:
        description: 'Device name (e.g., btn-1, r-pro-1)'
        required: true
        type: string
      yaml-files:
        description: 'YAML file(s) to build (multiline string for multiple files)'
        required: true
        type: string
      core-yaml-path:
        description: 'Path to Core.yaml for version extraction'
        required: true
        type: string
      esphome-version:
        description: 'ESPHome version to use (stable, beta, dev)'
        required: false
        type: string
        default: 'stable'
      check-yaml-changes:
        description: 'Whether to check for YAML changes before building'
        required: false
        type: boolean
        default: true
      publish-to-pages:
        description: 'Whether to publish to GitHub Pages'
        required: false
        type: boolean
        default: true
      has-installer:
        description: 'Whether the device has an index.html installer'
        required: false
        type: boolean
        default: true
      installer-path:
        description: 'Path to index.html installer (relative to repo root, e.g., "static" or ".")'
        required: false
        type: string
        default: ''

    outputs:
      version:
        description: 'The version extracted from Core.yaml'
        value: ${{ jobs.set-version.outputs.version }}
      html_url:
        description: 'The HTML URL from release drafter'
        value: ${{ jobs.set-version.outputs.html_url }}

jobs:
  check-for-yaml:
    name: Check for YAML Changes
    runs-on: ubuntu-latest
    outputs:
      yaml_changed: ${{ steps.check.outputs.yaml_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Find .yaml Changes in Last PR Merge
        id: check
        run: |
          if [ "${{ inputs.check-yaml-changes }}" = "false" ]; then
            echo "yaml_changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          BASE_COMMIT=$(git rev-parse HEAD^1)
          MERGE_COMMIT=$(git rev-parse HEAD)

          if git diff --name-only $BASE_COMMIT $MERGE_COMMIT | grep -q '\.yaml$'; then
            echo "yaml_changed=true" >> $GITHUB_OUTPUT
          else
            echo "yaml_changed=false" >> $GITHUB_OUTPUT
          fi

  set-version:
    name: Set Version
    runs-on: ubuntu-latest
    needs: [check-for-yaml]
    if: needs.check-for-yaml.outputs.yaml_changed == 'true'

    outputs:
      version: ${{ steps.read_version.outputs.version }}
      body: ${{ steps.run-release-drafter.outputs.body }}
      html_url: ${{ steps.run-release-drafter.outputs.html_url }}
    
    permissions:
      contents: write
      pages: write
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version from YAML file
        id: read_version
        run: |
          version=$(awk '/substitutions:/ {found=1} found && /version:/ {print $2; exit}' ${{ inputs.core-yaml-path }} | tr -d '"')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Detected version: $version"

      - name: Fetch Last Merged PR Body
        id: last_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&sort=updated&direction=desc&per_page=1")
          PR_BODY=$(echo "$PR_INFO" | jq -r '.[0].body')
          echo "$PR_BODY" > pr_body.txt

      - name: ðŸš€ Run Release Drafter
        id: run-release-drafter
        uses: release-drafter/release-drafter@v6
        with:
          version: ${{ steps.read_version.outputs.version }}
          publish: true
          tag: ${{ steps.read_version.outputs.version }}
          name: Release ${{ steps.read_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-firmware:
    name: Build Firmware
    uses: esphome/workflows/.github/workflows/build.yml@main
    needs:
      - check-for-yaml
      - set-version
    if: needs.check-for-yaml.outputs.yaml_changed == 'true'
    with:
      files: ${{ inputs.yaml-files }}
      esphome-version: ${{ inputs.esphome-version }}
      combined-name: firmware
      release-summary: ${{ needs.set-version.outputs.body }}
      release-version: ${{ needs.set-version.outputs.version }}

  publish:
    name: Publish to GitHub Pages
    runs-on: ubuntu-latest
    needs:
      - build-firmware
      - set-version
    # Remove github.run_attempt == 1 to allow uploads on retries
    if: needs.check-for-yaml.outputs.yaml_changed == 'true' && inputs.publish-to-pages
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Download Firmware
      - uses: actions/download-artifact@v4
        with:
          name: firmware
          path: firmware

      # Zip firmware
      - name: Zip firmware
        run: |
          zip -r firmware.zip firmware

      # Upload firmware.zip as an asset using GitHub CLI
      - name: Upload firmware.zip to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.set-version.outputs.version }}"
          
          # Check if release exists
          if gh release view "$VERSION" --repo "${{ github.repository }}" > /dev/null 2>&1; then
            # Upload with error handling
            if gh release upload "$VERSION" \
              firmware.zip \
              --repo "${{ github.repository }}" \
              --clobber; then
              echo "Successfully uploaded firmware.zip to release $VERSION"
            else
              echo "Failed to upload firmware.zip to release $VERSION"
              exit 1
            fi
          else
            echo "Release $VERSION does not exist!"
            echo "Available releases:"
            gh release list --repo "${{ github.repository }}" --limit 5
            exit 1
          fi

      - name: Copy firmware and manifest
        run: |-
          mkdir -p output/firmware
          # ESPHome workflow structure might vary, so let's handle different cases
          if [ -d "firmware/${{ needs.set-version.outputs.version }}" ]; then
            echo "Found versioned firmware directory"
            cp -r firmware/${{ needs.set-version.outputs.version }}/* output/firmware/
          elif [ -d "firmware" ] && [ "$(ls -A firmware)" ]; then
            echo "Copying all firmware files"
            cp -r firmware/* output/firmware/
          else
            echo "ERROR: No firmware files found!"
            ls -la firmware/
            exit 1
          fi

      # Copy the index.html installer to output (if it exists)
      - name: Copy installer
        if: inputs.has-installer
        run: |-
          # Check multiple locations for index.html
          INSTALLER_FOUND=false
          
          # If installer-path is specified, check there first
          if [ -n "${{ inputs.installer-path }}" ]; then
            if [ -f "${{ inputs.installer-path }}/index.html" ]; then
              echo "Found index.html in specified path: ${{ inputs.installer-path }}"
              cp "${{ inputs.installer-path }}/index.html" output/
              INSTALLER_FOUND=true
            fi
          fi
          
          # If not found yet, check common locations
          if [ "$INSTALLER_FOUND" = "false" ]; then
            # Check static folder
            if [ -f "static/index.html" ]; then
              echo "Found index.html in static folder"
              cp "static/index.html" output/
              INSTALLER_FOUND=true
            # Check root folder
            elif [ -f "index.html" ]; then
              echo "Found index.html in root folder"
              cp "index.html" output/
              INSTALLER_FOUND=true
            fi
          fi
          
          if [ "$INSTALLER_FOUND" = "false" ]; then
            echo "No index.html found in any location, skipping installer copy"
          fi

      - uses: actions/upload-pages-artifact@v3
        with:
          path: output
          retention-days: 1

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
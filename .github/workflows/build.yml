name: Build, Release and Publish Firmware

on:
  workflow_call:
    inputs:
      device-name:
        description: 'Device name (e.g., btn-1, r-pro-1)'
        required: true
        type: string
      yaml-files:
        description: 'YAML file(s) to build (multiline string for multiple files)'
        required: true
        type: string
      core-yaml-path:
        description: 'Path to Core.yaml for version extraction'
        required: true
        type: string
      esphome-version:
        description: 'ESPHome version to use (stable, beta, dev)'
        required: false
        type: string
        default: 'stable'
      check-yaml-changes:
        description: 'Whether to check for YAML changes before building'
        required: false
        type: boolean
        default: true
      publish-to-pages:
        description: 'Whether to publish to GitHub Pages'
        required: false
        type: boolean
        default: true
      has-installer:
        description: 'Whether the device has an index.html installer'
        required: false
        type: boolean
        default: true
      installer-path:
        description: 'Path to index.html installer (relative to repo root, e.g., "static" or ".")'
        required: false
        type: string
        default: ''
      firmware-names:
        description: 'Custom firmware names mapping (e.g., "ETH:firmware-e,W:firmware-w"). Default is "firmware" for all.'
        required: false
        type: string
        default: ''

    outputs:
      version:
        description: 'The version extracted from Core.yaml'
        value: ${{ jobs.set-version.outputs.version }}
      html_url:
        description: 'The HTML URL from release drafter'
        value: ${{ jobs.set-version.outputs.html_url }}

jobs:
  check-for-yaml:
    name: Check for YAML Changes
    runs-on: ubuntu-latest
    outputs:
      yaml_changed: ${{ steps.check.outputs.yaml_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Find .yaml Changes in Last PR Merge
        id: check
        run: |
          if [ "${{ inputs.check-yaml-changes }}" = "false" ]; then
            echo "yaml_changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          BASE_COMMIT=$(git rev-parse HEAD^1)
          MERGE_COMMIT=$(git rev-parse HEAD)

          if git diff --name-only $BASE_COMMIT $MERGE_COMMIT | grep -q '\.yaml$'; then
            echo "yaml_changed=true" >> $GITHUB_OUTPUT
          else
            echo "yaml_changed=false" >> $GITHUB_OUTPUT
          fi

  set-version:
    name: Set Version
    runs-on: ubuntu-latest
    needs: [check-for-yaml]
    if: needs.check-for-yaml.outputs.yaml_changed == 'true'

    outputs:
      version: ${{ steps.read_version.outputs.version }}
      body: ${{ steps.run-release-drafter.outputs.body }}
      html_url: ${{ steps.run-release-drafter.outputs.html_url }}
    
    permissions:
      contents: write
      pages: write
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Read version from YAML file
        id: read_version
        run: |
          version=$(awk '/substitutions:/ {found=1} found && /version:/ {print $2; exit}' ${{ inputs.core-yaml-path }} | tr -d '"')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Detected version: $version"

      - name: Fetch Last Merged PR Body
        id: last_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&sort=updated&direction=desc&per_page=1")
          PR_BODY=$(echo "$PR_INFO" | jq -r '.[0].body')
          echo "$PR_BODY" > pr_body.txt

      - name: ðŸš€ Run Release Drafter
        id: run-release-drafter
        uses: release-drafter/release-drafter@v6
        with:
          version: ${{ steps.read_version.outputs.version }}
          publish: true
          tag: ${{ steps.read_version.outputs.version }}
          name: Release ${{ steps.read_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  prepare-build-matrix:
    name: Prepare Build Matrix
    runs-on: ubuntu-latest
    needs:
      - check-for-yaml
      - set-version
    if: needs.check-for-yaml.outputs.yaml_changed == 'true'
    outputs:
      matrix: ${{ steps.prepare-matrix.outputs.matrix }}
    steps:
      - name: Prepare Build Matrix
        id: prepare-matrix
        run: |
          # Convert multiline yaml-files input to array
          readarray -t yaml_files <<< "${{ inputs.yaml-files }}"
          
          # Parse firmware-names mapping
          declare -A name_mapping
          if [ -n "${{ inputs.firmware-names }}" ]; then
            IFS=',' read -ra mappings <<< '${{ inputs.firmware-names }}'
            for mapping in "${mappings[@]}"; do
              IFS=':' read -r pattern name <<< "$mapping"
              name_mapping["$pattern"]="$name"
            done
          fi
          
          # Build matrix
          matrix_json='{"include":['
          first=true
          
          for yaml_file in "${yaml_files[@]}"; do
            # Skip empty lines
            [ -z "$yaml_file" ] && continue
            
            # Determine firmware name based on file pattern
            firmware_name="firmware"
            filename=$(basename "$yaml_file")
            
            # Check each pattern in the mapping
            echo "DEBUG: Processing filename: $filename"
            echo "DEBUG: Available patterns: ${!name_mapping[@]}"
            
            # Extract pattern from filename: everything after last "-" and before ".yaml"
            pattern=$(basename "$yaml_file" .yaml | sed 's/.*-//')
            echo "DEBUG: Extracted pattern '$pattern' from filename '$filename'"
            
            if [ -n "${name_mapping[$pattern]}" ]; then
              firmware_name="${name_mapping[$pattern]}"
              echo "DEBUG: Pattern '$pattern' matched mapping -> firmware: $firmware_name"
            else
              firmware_name="$pattern"
              echo "DEBUG: No mapping found, using pattern as firmware name: $firmware_name"
            fi
            
            echo "DEBUG: Final firmware_name for $filename: $firmware_name"
            
            # Add comma if not first item
            if [ "$first" = true ]; then
              first=false
            else
              matrix_json+=','
            fi
            
            # Add to matrix
            matrix_json+="{\"yaml_file\":\"$yaml_file\",\"firmware_name\":\"$firmware_name\"}"
          done
          
          matrix_json+=']}'
          
          echo "Matrix: $matrix_json"
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT

  build-firmware:
    name: Build Firmware (${{ matrix.firmware_name }})
    uses: esphome/workflows/.github/workflows/build.yml@2025.8.1
    needs:
      - check-for-yaml
      - set-version
      - prepare-build-matrix
    if: needs.check-for-yaml.outputs.yaml_changed == 'true'
    strategy:
      matrix: ${{ fromJson(needs.prepare-build-matrix.outputs.matrix) }}
    with:
      files: ${{ matrix.yaml_file }}
      esphome-version: ${{ inputs.esphome-version }}
      combined-name: ${{ matrix.firmware_name }}
      release-summary: ${{ needs.set-version.outputs.body }}
      release-version: ${{ needs.set-version.outputs.version }}

  publish:
    name: Publish to GitHub Pages
    runs-on: ubuntu-latest
    needs:
      - build-firmware
      - set-version
    # Remove github.run_attempt == 1 to allow uploads on retries
    if: needs.check-for-yaml.outputs.yaml_changed == 'true' && inputs.publish-to-pages
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      # Download all firmware artifacts
      - name: Download all firmware artifacts
        uses: actions/download-artifact@v4
        with:
          path: firmware-artifacts
          pattern: firmware*

      # Create output directory structure
      - name: Create output directory structure
        run: |
          mkdir -p output
          mkdir -p firmware-all

      # Organize firmware files by variant
      - name: Organize firmware files by variant
        run: |
          VERSION="${{ needs.set-version.outputs.version }}"
          
          # Process each firmware artifact
          for artifact_dir in firmware-artifacts/*/; do
            if [ -d "$artifact_dir" ]; then
              # Extract artifact name (firmware variant name)
              artifact_name=$(basename "$artifact_dir")
              echo "Processing $artifact_name"
              
              # Create output directory for this variant
              mkdir -p "output/$artifact_name"
              
              # Copy firmware files to variant-specific directory
              if [ -d "$artifact_dir/$VERSION" ]; then
                echo "Found versioned firmware in $artifact_name"
                cp -r "$artifact_dir/$VERSION"/* "output/$artifact_name/"
              else
                echo "Copying all files from $artifact_name"
                cp -r "$artifact_dir"/* "output/$artifact_name/"
              fi
              
              # Also collect all firmware for the zip file
              if [ -d "$artifact_dir/$VERSION" ]; then
                cp -r "$artifact_dir/$VERSION"/* "firmware-all/"
              else
                cp -r "$artifact_dir"/* "firmware-all/"
              fi
            fi
          done
          
          # List output structure
          echo "Output structure:"
          find output -type f -name "*.bin" | sort

      # Create individual zip files for each firmware variant
      - name: Create individual firmware zip files
        run: |
          # Process each variant directory in output
          for variant_dir in output/*/; do
            if [ -d "$variant_dir" ] && [ "$variant_dir" != "output/*/" ]; then
              variant_name=$(basename "$variant_dir")
              echo "Creating zip for $variant_name"
              
              # Create zip file for this variant
              cd "$variant_dir"
              zip -r "../../${variant_name}.zip" .
              cd ../..
              
              echo "Created ${variant_name}.zip"
            fi
          done
          
          # List created zip files
          echo "Created zip files:"
          ls -la *.zip || echo "No zip files found"

      # Upload individual firmware zip files as release assets
      - name: Upload firmware zip files to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.set-version.outputs.version }}"
          
          # Check if release exists
          if ! gh release view "$VERSION" --repo "${{ github.repository }}" > /dev/null 2>&1; then
            echo "Release $VERSION does not exist!"
            echo "Available releases:"
            gh release list --repo "${{ github.repository }}" --limit 5
            exit 1
          fi
          
          # Upload each zip file
          for zip_file in *.zip; do
            if [ -f "$zip_file" ]; then
              echo "Uploading $zip_file to release $VERSION"
              
              if gh release upload "$VERSION" \
                "$zip_file" \
                --repo "${{ github.repository }}" \
                --clobber; then
                echo "Successfully uploaded $zip_file"
              else
                echo "Failed to upload $zip_file"
                exit 1
              fi
            fi
          done
          
          echo "All firmware zip files uploaded successfully"


      # Copy the index.html installer to output (if it exists)
      - name: Copy installer
        if: inputs.has-installer
        run: |-
          # Check multiple locations for index.html
          INSTALLER_FOUND=false
          
          # If installer-path is specified, check there first
          if [ -n "${{ inputs.installer-path }}" ]; then
            if [ -f "${{ inputs.installer-path }}/index.html" ]; then
              echo "Found index.html in specified path: ${{ inputs.installer-path }}"
              cp "${{ inputs.installer-path }}/index.html" output/
              INSTALLER_FOUND=true
            fi
          fi
          
          # If not found yet, check common locations
          if [ "$INSTALLER_FOUND" = "false" ]; then
            # Check static folder
            if [ -f "static/index.html" ]; then
              echo "Found index.html in static folder"
              cp "static/index.html" output/
              INSTALLER_FOUND=true
            # Check root folder
            elif [ -f "index.html" ]; then
              echo "Found index.html in root folder"
              cp "index.html" output/
              INSTALLER_FOUND=true
            fi
          fi
          
          if [ "$INSTALLER_FOUND" = "false" ]; then
            echo "No index.html found in any location, skipping installer copy"
          fi

      - uses: actions/upload-pages-artifact@v3
        with:
          path: output
          retention-days: 1

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
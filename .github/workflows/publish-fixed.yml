name: Reusable Publish Workflow (Fixed)

on:
  workflow_call:
    inputs:
      core_yaml_path:
        required: true
        type: string
      firmwares_json:
        required: true
        type: string

jobs:
  set-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.read_version.outputs.version }}
      upload_url: ${{ steps.run-release-drafter.outputs.upload_url }}
      body: ${{ steps.run-release-drafter.outputs.body }}
      html_url: ${{ steps.run-release-drafter.outputs.html_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Read version from YAML file
        id: read_version
        run: |
          version=$(awk '/substitutions:/ {found=1} found && /version:/ {print $2; exit}' ${{ inputs.core_yaml_path }} | tr -d '"')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Detected version: $version"
      - name: Fetch Last Merged PR Body
        id: last_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&sort=updated&direction=desc&per_page=1")
          PR_BODY=$(echo "$PR_INFO" | jq -r '.[0].body')
          echo "$PR_BODY" > pr_body.txt
      - name: Run Release Drafter
        id: run-release-drafter
        uses: release-drafter/release-drafter@v6
        with:
          version: ${{ steps.read_version.outputs.version }}
          publish: true
          tag: ${{ steps.read_version.outputs.version }}
          name: Release ${{ steps.read_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-firmware:
    needs: set-version
    strategy:
      matrix:
        firmware: ${{ fromJson(inputs.firmwares_json) }}
    uses: esphome/workflows/.github/workflows/build.yml@main
    with:
      files: ${{ matrix.firmware.yaml }}
      esphome-version: stable
      combined-name: ${{ matrix.firmware.name }}
      release-summary: ${{ needs.set-version.outputs.body }}
      release-version: ${{ needs.set-version.outputs.version }}

  build-site:
    needs: [set-version, build-firmware]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Copy static files with link resolution (no symlinks)
        run: mkdir -p output && cp -R --dereference TEMP_Project-1/static/* output/

      - name: Verify no symlinks or hardlinks exist
        run: |
          symlinks=$(find output -type l | wc -l)
          hardlinks=$(find output -type f -links +1 | wc -l)
          if [ "$symlinks" -gt 0 ] || [ "$hardlinks" -gt 0 ]; then
            echo "ERROR: Found links in output directory!"
            exit 1
          fi
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-pages
          path: output

  publish:
    needs: [build-site, build-firmware, set-version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Debug link analysis
        run: |
          find . -type l -not -path "./.git/*" -ls | tee repo_symlinks.txt
          find . -type f -links +1 -not -path "./.git/*" -ls | tee repo_hardlinks.txt
           
      - name: Download firmwares with zero-tolerance approach
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CLEAN_DIR=$(mktemp -d)
          firmwares=($(echo '${{ inputs.firmwares_json }}' | jq -r '.[].name'))
          for name in "${firmwares[@]}"; do
            mkdir -p "$CLEAN_DIR/$name"
            tmp_download=$(mktemp -d)
            gh run download -n "$name" -D "$tmp_download"
            find "$tmp_download" -type f \( -name "*.json" -o -name "*.bin" \) | while read file; do
              rel_path="${file#$tmp_download/}"
              target_dir="$CLEAN_DIR/$name/$(dirname "$rel_path")"
              mkdir -p "$target_dir"
              cp --dereference "$file" "$target_dir/"
            done
            rm -rf "$tmp_download"
            version="${{ needs.set-version.outputs.version }}"
            mkdir -p "$name/$version"
            cp -R --dereference "$CLEAN_DIR/$name"/* "$name/"
          done
          rm -rf "$CLEAN_DIR"

      - name: Create GitHub release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version=${{ needs.set-version.outputs.version }}
          firmwares=($(echo '${{ inputs.firmwares_json }}' | jq -r '.[].name'))
          for name in "${firmwares[@]}"; do
            tmp_release=$(mktemp -d)
            mkdir -p "$tmp_release/$version"
            cp -R --dereference "$name/$version"/* "$tmp_release/$version/"
            (cd "$tmp_release" && zip -r "../$name.zip" .)
            gh release upload --clobber "$version" "$name.zip"
            rm -rf "$tmp_release"
          done
      
      - name: Download GitHub Pages artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p artifact
          gh run download -n "github-pages" -D artifact
          rm -rf output
          mkdir -p output
          cp -R --dereference artifact/* output/

      - name: Prepare firmware directories
        run: |
          version="${{ needs.set-version.outputs.version }}"
          firmwares=($(echo '${{ inputs.firmwares_json }}' | jq -r '.[].name'))
          for name in "${firmwares[@]}"; do
            mkdir -p "output/$name/$version"
            echo '{"name":"'$name'","version":"'$version'","new_install_prompt_erase":true,"builds":[{"chipFamily":"ESP32","parts":[{"path":"firmware.bin","offset":0}]}]}' > "output/$name/$version/manifest.json"
            if [ -f "$name/$version/firmware.bin" ]; then
              cp --dereference "$name/$version/firmware.bin" "output/$name/$version/"
            else
              dd if=/dev/zero of="output/$name/$version/firmware.bin" bs=1024 count=10
            fi
          done

      - name: Final verification
        run: |
          symlinks=$(find output -type l | wc -l)
          hardlinks=$(find output -type f -links +1 | wc -l)
          if [ "$symlinks" -gt 0 ] || [ "$hardlinks" -gt 0 ]; then
            echo "ERROR: Found links in output directory!"
            exit 1
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'output'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4